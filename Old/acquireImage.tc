#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <dirent.h>
#include "fitsio.h"

#define PI 3.141592654
#define N_AXES 1024

void acquireImage(fitsfile *fptr, char *file, float image[][N_AXES]){

/***************************************************************************/
/***************************************************************************/

/*
  IMAGE variable initialization */
  int status = 0;   /* CFITSIO status value MUST be initialized to zero! */
  int ii, jj, naxis = 0;
  int bitpix, bytepix, datatype = 0, anynul;
  int NaNcount = 0, NEGcount = 0;
  long naxes[2] = {1, 1};
  long first, npix = 1;
  float *array, arrval;
  double nulval = 0.0;

/*
  KEYWORD variable initialization */
  char keyname[10];
  char keyval[80], comm[80];

/*
  OTHER variable initialization (for loops, etc.) */
  int lp;

  printf("\nAcquiring image from file:\n%s\n",file);

/***************************************************************************/

    for (ii = 0; ii < 2; ii++)
      naxes[ii] = 1;

/*******************
  Get image parameters from fits header   */
    fits_get_img_param(fptr, 2, &bitpix, &naxis, naxes, &status);

/* Calculate total number of image pixels to read */
    for (ii = 0; ii < 2; ii++)
    {
      npix *= naxes[ii];
      if (naxes[ii] != N_AXES) {
        printf("Axis size received: %ld,  expected: %d\n", naxes[ii], N_AXES);
        fits_close_file(fptr, &status);
      }
    }

    bytepix = abs(bitpix) / 8;  /* Calculate how many bytes for each pixel value */
    datatype = TFLOAT;          /* Type of data of each pixel value */

/* Allocate memory to read in 2D image into 1D array */
    array = (float *) calloc(npix, bytepix); 


/*******************
  Read image table data into 1D array */
    first = 1;
    fits_read_img(fptr, datatype, first, npix, 
                  &nulval, array, &anynul, &status);


/*******************
Convert 1D array into 2D image array */
  for (jj = 0; jj < N_AXES; jj++){
    for (ii = 0; ii < N_AXES; ii++){
      arrval = array[(jj*1024)+ii];
      if(isnan(arrval)){
        NaNcount++;
        image[ii][jj] = 1e-17;
      }
      else if(arrval < 0){
        NEGcount++;
        image[ii][jj] = 1e-17;
      }
      else
        image[ii][jj] = arrval;
    }
  }
  free(array);

  if (status) fits_report_error(stderr, status); /* print any error message */

}