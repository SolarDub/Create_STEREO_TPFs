#!/bin/bash

# prompt "Question" "Default value"
function prompt() {
  osascript <<EOT
    tell app "System Events"
      text returned of (display dialog "$1" default answer "$2" buttons {"OK"} default button 1 with title "$(basename $0)")
    end tell
EOT
}

# If "-d"/"-f" switch is included, prompt user to enter directory/file names
function update() {

  if [[ $SWS == *"-d"* && $KEY == *"_DIR"* ]] \
  || [[ $SWS == *"-f"* && $KEY == *"_FILE"* ]]       
  then
    PRMPT="Enter "${KEY}":"             # Create user prompt text
    VALENT="$(prompt "$PRMPT" "$VAL")"  # Prompt user to accept or change value
    echo "${VALENT%"/"}"                # Remove trailing / for adding to values array
  else
    echo "${VAL%"/"}"                   # Remove trailing / for adding to values array
  fi
}

# Get value assigned to given key name
function getVal() {

  for i in "${!KEYS[@]}"; do
    if [[ "${KEYS[$i]}" = "${name}" ]]
    then
      echo ${VALS["${i}"]}
    fi
  done
}

echo $0 $1

SWS=${*}   # Array of switches

echo "$SWS"

if [ -n "$SWS" ]   # Check if length of switch string is zero
then
  echo "Hello "
  if [[ $SWS == *"-d"* ]]
  then
    echo "Dog"
  else
    echo "Cat"
  fi
  if [[ $SWS == *"-f"* ]]
  then
    echo "Fish"
  else
    echo "Cat"
  fi
  if [[ $SWS == *"-d"*  &&  $SWS == *"-f"* ]]
  then
    echo "Dog Fish"
  else
    echo "Cat Cat"
  fi
fi

#
# Absolute path this script is in, thus /home/user/bin
BASEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
echo $BASEDIR

DIRSFILENM="directory_file_lists.txt"
DIRSFILENAME=${BASEDIR}/"tables"/${DIRSFILENM}
echo $DIRSFILENAME

echo " "
echo "INPUT DIRECTORIES/FILES"

KEYS=()  # Define empty key (input value description) array
VALS=()  # Define empty value (input file/directory) array

while IFS='=', read -r KEY VAL; do    # Read each line from list file

  echo "${KEY}=${VAL}"

  if [ -n "$SWS" ]    # Execute if the list of switches is not empty
  then
    OUTVAL="$(update $SWS $KEY $VAL)"
  else
    OUTVAL="${VAL%"/"}"   # Remove trailing
  fi

  KEYS+=($KEY)        # Add to key array
  VALS+=($OUTVAL)     # Add to value array         

done < "$DIRSFILENAME"


echo " "
NUM_VALS=${#VALS[@]}    # Number of defined directories

echo "OUTPUT DIRECTORIES/FILES ("${NUM_VALS}")"
for (( I=0; I<${NUM_VALS}; I++)); do
  echo "Writing ${KEYS["${I}"]}=${VALS["${I}"]}"
done
echo " "


if [ -n "$SWS" ]    # Execute if the list of switches is not empty
then
  rm "$DIRSFILENAME"    # Remove the directory/file text file ready to be rewritten

# Write directory and filenames
  for (( I=0; I<${NUM_VALS}; I++)); do
    echo "Writing ${KEYS["${I}"]}=${VALS["${I}"]}"
    echo "${KEYS["${I}"]}=${VALS["${I}"]}" >> "$DIRSFILENAME"
  done
fi

name='THIS_SCRIPT_DIR'
BASEDIR="$(getVal $KEY $name)"
echo $BASEDIR

name='STAR_COORD_LIST_FILE'
STARLISTFILE="$(getVal $KEY $name)"
echo $STARLISTFILE

STARLISTFILEPATH=${BASEDIR}/"starLists"/${STARLISTFILE}
echo $STARLISTFILEPATH

exit



#while read -r info; do
##  echo "$info"
#  read NAME RAh RAm RAs DECd DECm DECs <<< "$info"
#
##  echo $NAME
##  echo $RAh
##  echo $RAm
##  echo $RAs
##  echo $DECd
##  echo $DECm
##  echo $DECs
#
#  ./fitsfileIOscript.exe $NAME $RAh $RAm $RAs $DECd $DECm $DECs
#
#done < "$STARLISTFILEPATH"
